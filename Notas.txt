
-----   Curso JAVA y JPA: Consultas avanzadas, rendimiento y modelos complejos.   -----

Diagrama de la BD tienda: 
https://lucid.app/lucidchart/29de0124-2009-4307-9937-73e790bde509/edit?beaconFlowId=815E54A21FFE6249&invitationId=inv_0701fbad-9a1c-4765-bc89-1851e02b98aa&page=0_0#

--Conexion de github
…or create a new repository on the command line -- Pegar todo esto en CMD de eclipse

echo "# Curso-PersistenciaConJPA-Hibernate" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:Gerson121295/JavaJPAconsultasAvanzadas-AppTienda2.git
git push -u origin main

…or push an existing repository from the command line
git remote add origin git@github.com:Gerson121295/JavaJPAconsultasAvanzadas-AppTienda2.git
git branch -M main
git push -u origin main


- Descargar el proyecto del curso de Persistencia con JPA - Hibernate.
https://github.com/alura-cursos/JPA-con-hibernate-Alura-/tree/stage-final

Decargar el software H2 para la base de datos:
https://www.h2database.com/html/main.html  
elegir windows installer Luego instalar el software H2.


Configurar H2 para crear e ingresar la BD a utilizar:
Para configurar la url de la base de datos vamos a ejecutar el software de h2
Buscar el programa H2 en nuestra maquina llamado H2 Console y darle clic para ejecutarlo.

Revisamos en la barra de tareas(donde estan las apps abiertas) en la parte donde esta un 
signo de elevacion ^ donde se desplegan los iconos sobre antivirus, memoria, etc. ahi se
encontrara el icono de H2 para la BD. Clic derecho sobre el icono H2 y clic en crear una 
nueva base de datos(create new database).

- En la ruta de la base de datos el último nombre va a ser el nombre de la base de datos 
y el restante las carpetas del directorio.

	---------   H2 Console  ----------
	Database path: /prueba./test
	Username:	sa
	password:	admin
	password confirmation: admin
			Clic en Create.
	----------------------------------

- Luego vamos a ejecutar la aplicación de h2 y modificar los valores con los de la 
base de datos que acabamos de crear (url,usuario,password) y seleccionamos connect.

	Registrar 
	----------------------------------
	Configuraciones guardadas:  Generic H2(Embedded)	
	Nombre de la configuración: Generic H2(Embedded)	
	Controlador: 	org.h2.Driver
	URL JDBC: 	jdbc:h2:~/prueba/test
	Nombre de usuario: 	sa
	Contraseña: 	admin
		Conectar	Probar la conexion
	----------------------------------


-- Relacionamiento Bidireccional #2:
Alura nos solicita que creásemos un modelo que nos permitiera guardar en la base de datos 
tanto los clientes como los diversos productos solicitados por ese cliente en un cierto 
pedido.

[00:24] Entonces nosotros vamos a tener diversos clientes, que van a ser guardados en la 
base de datos como el restante de estas entidades. Y entonces este cliente va a realizar 
un pedido, y ese pedido tiene que tener una cierta cantidad de productos y esos productos 
los vamos a almacenar dentro de una nueva entidad que se va a llamar items_pedido.

[00:48] Adicional esos productos tienen una cierta categoría, esa categoría puede ser 
electrónico, puede ser libros, puede ser celulares. Y todas esas entidades, como estamos 
viendo, ellas se encuentran relacionadas de la forma uno a muchos o en algunos casos de 
muchos a muchos.

Conexion a la BD de H2
Con la finalidad de nosotros tener una mejor percepción de lo que nosotros estamos haciendo, 
de cómo es esa construcción de las tablas, vamos a modificar la ruta de la base de datos a 
una dentro de un archivo local, en una carpeta local para poder mostrar las tablas que se 
están creando en todo momento. Entonces lo primero que voy a hacer es abrir la carpeta 
donde voy a almacenar esa información.

[01:52] Entonces voy a buscar acá la carpeta, sería la carpeta JPA. Voy a copiar la ruta 
que sería usuarios\públicos\Alura\jpa 
(C:\Users\Hp01\OneDrive\Escritorio\Cursos\Alura\JavaBackend-SpringBoot\JavaJPAConsultasAvanzadas-appTiendaV2\BDTienda\database)  //solo agregar la ruta
luego ir de vuelta a mi archivo de persistence.xml voy 
a reemplazar la parte de "mem:tienda" por la ruta donde voy a guardar mi archivo y la BD.
	
 
---  Luego debo crear una BD en H2

Configurar H2 para crear e ingresar la BD a utilizar:
Para configurar la url de la base de datos vamos a ejecutar el software de h2
Buscar el programa H2 en nuestra maquina llamado H2 Console y darle clic para ejecutarlo.

Revisamos en la barra de tareas(donde estan las apps abiertas) en la parte donde esta un 
signo de elevacion ^ donde se desplegan los iconos sobre antivirus, memoria, etc. ahi se
encontrara el icono de H2 para la BD. Clic derecho sobre el icono H2 y clic en crear una 
nueva base de datos(create new database).

- En la ruta de la base de datos el último nombre va a ser el nombre de la base de datos 
y el restante las carpetas del directorio.

	---------   H2 Console  ----------
	Database path: C:\Users\Hp01\OneDrive\Escritorio\Cursos\Alura\JavaBackend-SpringBoot\JavaJPAConsultasAvanzadas-appTiendaV2\BDTienda\database    //pegar la ruta de la carpeta que almacenara la data de la BD //y escribimos el nombre de la BD \database
	Username:	sa
	password:	admin
	password confirmation: admin
			Clic en Create.
	----------------------------------

- Luego Ejecutar el codigo en JAVA para que se cree las tablas en la BD.
-Reiniciar la maquina(por si no carga las tablas de la BD creada en la consola de H2)
- Luego nos conectamos en la consola de H2 vamos a ejecutar la aplicación de h2 y modificar los 
valores con los de la base de datos que acabamos de crear (url,usuario,password) 
y seleccionamos connect.

	Registrar 
	----------------------------------
	Configuraciones guardadas:  Generic H2(Embedded)	
	Nombre de la configuración: Generic H2(Embedded)	
	Controlador: 	org.h2.Driver
	URL JDBC: 	jdbc:h2:C:\Users\Hp01\OneDrive\Escritorio\Cursos\Alura\JavaBackend-SpringBoot\JavaJPAConsultasAvanzadas-appTiendaV2\BDTienda\database
	Nombre de usuario: 	sa
	Contraseña: 	admin
		Conectar	Probar la conexion
	----------------------------------

-Revisamos la consola de H2 y ya tendremos creadas las tablas en base a nuestras clases de la
 app en java, bien ahora cerramos la BD de la consola buscamos el icono de la BD H2 en la barra
de tareas y le damos clic derecho y clic en exit.

- ¿Por qué se debe usar el parámetro mappedBy en la anotación @OneToMany?
   Para indicar que se trata de una relación bidireccional.
   Sin este parámetro, JPA considera que es otra relación, asumiendo que hay otra tabla de unión.


	Remplazar todo los texto iguales a producto por pedido se usar:
ctrl + f  --> Find: producto -> Replace with: pedido -> 
Seleccionar o marcar: Forward, All. Opcions: Case sensitive, Wrap search, Whole word y clic en
Replace All y clic en Close.


- Test de relacionamiento bidireccional #2
[00:00] Hola. En la parte anterior, nosotros intentamos guardar un pedido y nos encontramos con 
el siguiente error. El pedido, el objeto pedido hace referencia a un objeto que no ha sido 
salvado y que tiene un estado transiente. Entonces, recordando del primer curso, cuando 
nosotros intentamos guardar un producto que tenía dentro de sus atributos la entidad categoría, 
y esa categoría no había sido guardada en la base de datos anteriormente, no nos arrojaba el 
error de estado transiente.

[00:30] Entonces nosotros tuvimos que crear un Dao para la categoría, para poder corregir ese 
error. Entonces, en teoría nosotros tenemos que crear un Dao para todos los elementos que sean 
guardados en las bases de datos. Y cuando nosotros tenemos un elemento que recibe otro como 
atributo, él nos arroja ese error del estado transiente.

[00:55] Recordando del primer curso, los estados son transientes cuando es instanciado, manage 
cuando persistimos o cuando usamos el método guardar del EntityManager. Cuando realizamos el 
commit sincronizamos y cuando realizamos el close de ese EntityManager, nosotros pasamos a 
ese estado, un estado detached o separado, que es similar al estado transiente.

--- Revisamos console H2 BD para ver si los registros fueron guardados ---

[04:05] En productos, Xiaomi, correcto. Ahora vamos a ver si agregó el cliente, el cliente, 
Juan, el id, identidad el DNI. Perfecto. Vamos a ver los pedidos. En pedido agregó el ID, 
la fecha y el cliente ID número 1, que es el cliente Juan. El valor total está como nulo. 
Vamos a tener que corregir ese error, pues no puede aparecer nulo.

[04:33] V vamos a limpiar acá y vamos a ver qué apareció en items_pedido. No agregó nada de 
items_pedido. Entonces. En teoría, la intuición nos dice que tenemos que crear un Dao para 
items_pedido. Cerramos esa base de datos. Pero no tenemos que crear un nuevo Dao.

[04:53] Hay una propiedad en la notación OneToMany que nos permite que a la hora de realizar 
una acción en la entidad pedido, realice esa acción en cascada para la entidad que está 
relacionada, que en este caso sería la entidad items_pedido. Entonces esa propiedad se llama 
cascade.

[05:15] Y el tipo cascade=CascadeType, tenemos una serie de opciones. Esa alteración en cascada, 
esa acción en cascada puede ocurrir cuando yo elimine un archivo de pedido, cuando yo guarde 
por primera vez un archivo en pedido, cuando actualice, cuando hago el merge que lo traigo de 
la base de datos o en todos los casos, que es el que me interesa.

[05:43] Entonces, cada vez que yo realice una operación con pedido, que haga una alteración 
en items_pedido.


- ¿Cuál es el uso del parámetro cascade?
Cascade crea un efecto dominó en las operaciones realizadas en una entidad.
Propagar las operaciones realizadas en una entidad en su relación.

En esta aula, aprendiste:
- Mapeo de nuevas entidades en la aplicación según el modelado de la base de datos.
- Mapeo de una relación con cardinalidad de muchos a muchos.
- Mapeo de una relación bidireccional.
- Cómo persistir entidades que tienen relaciones bidireccionales.


02 - Consultas Avanzadas
*** Funciones de Agregacion SQL
Vamos a realizar consultas un poco más avanzadas que nos van a permitir aplicar las funciones 
de agregación. Las funciones de agregación son aquellas que recorren todos los elementos en la 
tabla y realizan una operación en conjunto.

------------------------------------------------------------------------------------------
				Funciones de Agregado
------------------------------------------------------------------------------------------
Funcion	|				Descripcion
  AVG 	| Utilizada para calcular el promedio de los valores de un campo determinado.
  COUNT	| Utilizada para devolver el numero de registros de la seleccion.
  SUM	| Utilizada para devolver la suma de todos los valores de un campo determinado.
  MAX   | Utilizada para devolver el valor mas alto de un campo especificado.
  MIN 	| Utilizada para devolver el valor mas abajo de un campo especificado.
------------------------------------------------------------------------------------------

 -- Consultas con select new
 -- Utilizando Named Queries
las namedQuery que son consultas que se encuentran dentro de la entidad, entonces nosotros 
tenemos la entidad producto y dentro de nuestra misma entidad, nosotros vamos a crear las 
consultas que estábamos realizando en la clase Dao

Por lo general, nosotros colocamos todos los accesos a la base de datos dentro del Dao. 
En este caso particular nosotros podemos colocarlas dentro de la entidad. Entonces vemos 
las consultas como selectPorId, consultarPorId, consultarTodos, consultarPorNombre, 
consultarPorNombreDeCategoría y consultarPrecioPorNombreDeProducto.

Las consultas anteriormente la agregamos en DAO pero en este caso las agregaremos dentro
de la entidad o clase Producto.

- ¿Cuál de las siguientes es una de las ventajas de utilizar NamedQueries?
Acercar las consultas de una entidad a su clase.
Las NamedQueries se declaran en la clase de entidad.

En esta aula, aprendiste:
- Realización de consultas utilizando funciones de agregación como min, max, avg y sum;
- Cómo escribir consultas de informes usando JPQL;
- Cómo usar el recurso seleccionado nuevo en consultas JPQL;
- Realización de consultas mediante consultas con nombre.


*** #03 Performance de Consultas

-- Entendiendo Lazy / Eager
Con fines de practica:
Nosotros en esta parte cargamos unos registros desde unos archivos de texto, con una clase que 
importa utilizar instancia los Dao y lee esos archivos de texto para cargarlos en la base de 
datos. Nosotros creamos una clase main para realizar nuestras pruebas de desempeño, cargamos 
todos nuestros registros, instanciamos el EntityManager.

- Se creo la clase LoadRecords.java en la carpeta Prueba
- Se creo la Carpeta Utils con los archivos .txt categoria, cliente, producto en carpeta src/main/resources
- Se creo la clase PruebaDeDesempeño.java en la carpeta Prueba.

Analisis:
Ahora vamos a ir a la clase pedido para ver por qué realizó un join. Entonces, nosotros vemos 
que el atributo cliente tiene la anotación ManyToOne. Todos los elementos que tengan la anotación 
del tipo ToOne, ya sean ManyToOne o OneToOne. tienen una estrategia de cargamento que se es del 
tipo eager, una estrategia de cargamento anticipada.

[04:02] Es decir, siempre que nosotros instanciemos una entidad, llamemos una tabla de la base 
de datos, y que uno de sus atributos, en este caso es cliente, tenga la notación del tipo ToOne, 
o sea, OneToOne, ManyToOne, él va a ser un join con todos los atributos que tengan esas 
notaciones.

[04:22] Entonces si lo tengo acá cinco atributos del tipo ManyToOne, él va a realizar un join 
con esas cinco entidades a pesar de que nosotros no las estemos utilizando. Si nosotros 
ejecutamos nuevamente, aquí tenemos que cerrar la base de datos, vamos a ejecutar nuevamente, 
vemos que los items no realizó item con los items del pedido, a pesar de que tienen la notación 
OneToMany.

[05:01] Eso es porque todas las anotaciones que sean de tipo ToMany, ya sea ManyToMany o 
OneToMany, tienen la estrategia de cargamentos del tipo lazy o cargamento perezoso.
 Nosotros vamos a traer ese recurso únicamente cuando sean solicitadas. 

[07:03] Entonces imagina, cada vez que si dentro de ese producto, vamos a ejecutar de nuevo, 
él realizó un join con cliente, que se encuentra dentro de la tabla pedido, nosotros llamamos al 
atributo item para determinar el tamaño de esa lista, lo trajo de la entidad items_pedido, 
realizó un join con la entidad producto y un join con la entidad categoría, pero esa entidad 
no se encuentra en items_pedido.

[07:44] Esa entidad se encuentra en producto. Entonces sí hubiese otra, si dentro de categoría 
hubiese otro atributo con la anotación ManyToOne también sería instanciada, también sería llamada 
con un join. Entonces imagínate cuántas veces nosotros podemos extender esa cadena.

[08:08] Lo que nosotros vamos a hacer para corregir ese error, ese error de desempeño, que es 
una parte de las buenas prácticas es utilizar un atributo en la notación ManyToOne, que es el 
atributo fetch=FetchType.LAZY. Si vemos acá, nosotros tenemos dos tipos, el tipo lazy del tipo 
eager.

[08:36] Para las anotaciones del tipo ManyToOne, nosotros vamos a utilizar el cargamento o la 
estrategia de cargamento del tipo lazy o perezoso, que nos va a permitir llamar los elementos 
de cliente únicamente cuando sean solicitados. Ya los elementos del tipo OneToMany o ManyToMany, 
ellos por default ya son del tipo lazy.

 resumiendo, en la entidad pedido nosotros tenemos dos tipos de notaciones, tenemos la notación 
ManyToOne y la anotación OneToMany. Todas las anotaciones que sean del tipo ToOne, OneToOne o 
ManyToOne por default son del tipo eager. Quiere decir que ellos tienen un cargamento anticipado.

[12:02] Van a ser cargados a pesar de que los datos no sean requeridos en esa consulta. Y todos 
los elementos que sean del tipo ToMany, ManyToMany o OneToMany ellos van a ser cargados 
únicamente cuando sean requeridos dentro de nuestra consulta.

[12:22] Eso fue establecido así en JPA, porque generalmente los elementos del tipo ToMany son 
listas y para evitar que se sature la memoria, el estándar y el lazy para los elementos del 
tipo ToMany, como OneToMany o ManyToMany. Entonces, sin embargo, al nosotros colocar esta 
anotación del tipo lazy, nosotros podemos generar algunos problemas dentro de nuestra aplicación, 
es lo que vamos a hablar más adelante, y vamos a ver cómo se resuelven esos problemas.

es parte de las buenas prácticas que toda nuestra aplicación sea lazy, para evitar el 
consumo excesivo de memoria y agilizar aumentar la velocidad de nuestra aplicación, ya que 
vamos a evitar que estén siendo consultados valores o informaciones que no sean deseados 
dentro de nuestra consulta.

-- Consultas con Join Fetch
- ¿Por qué es interesante utilizar el recurso JOIN FETCH en una consulta JPQL?
Para evitar cargar relaciones en todas las consultas de aplicaciones.
JOIN FETCH permite elegir qué relaciones se cargarán en una consulta determinada, en lugar de 
cargarlas siempre.

* En esta aula, aprendiste:
- Cómo funcionan las estrategias EAGER y LAZY, en consultas de entidades que tienen relaciones;
- Por qué JPA podría lanzar LazyInitializationException en ciertas situaciones;
- Buenas prácticas en la carga de entidades con relaciones;
- Cómo realizar consultas programadas con la función de búsqueda de combinación.

















